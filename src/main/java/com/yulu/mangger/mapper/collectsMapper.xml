<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yulu.mangger.dao.CollectsMapper" >
	<resultMap id="BaseResultMap" type="com.yulu.mangger.bean.Collects" >
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="userid" property="userid" jdbcType="INTEGER" />
		<result column="newsid" property="newsid" jdbcType="INTEGER" />
		<result column="isdelete" property="isdelete" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause" >
		<where >
			<foreach collection="oredCriteria" item="criteria" separator="or" >
				<if test="criteria.valid" >
					<trim prefix="(" suffix=")" prefixOverrides="and" >
						<foreach collection="criteria.criteria" item="criterion" >
							<choose >
								<when test="criterion.noValue" >
                  and ${criterion.condition}
								</when>
								<when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue" >
                  and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause" >
		<where >
			<foreach collection="example.oredCriteria" item="criteria" separator="or" >
				<if test="criteria.valid" >
					<trim prefix="(" suffix=")" prefixOverrides="and" >
						<foreach collection="criteria.criteria" item="criterion" >
							<choose >
								<when test="criterion.noValue" >
                  and ${criterion.condition}
								</when>
								<when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue" >
                  and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List" >
    id, userid, newsid, isdelete
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
		<include refid="Base_Column_List" />
    from collects
    where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from collects
    where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.yulu.mangger.bean.Collects" >
    insert into collects (id, userid, newsid, 
      isdelete)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{newsid,jdbcType=INTEGER}, 
      #{isdelete,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="com.yulu.mangger.bean.Collects" >
    insert into collects
		<trim prefix="(" suffix=")" suffixOverrides="," >
			<if test="id != null" >
        id,
			</if>
			<if test="userid != null" >
        userid,
			</if>
			<if test="newsid != null" >
        newsid,
			</if>
			<if test="isdelete != null" >
        isdelete,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides="," >
			<if test="id != null" >
        #{id,jdbcType=INTEGER},
			</if>
			<if test="userid != null" >
        #{userid,jdbcType=INTEGER},
			</if>
			<if test="newsid != null" >
        #{newsid,jdbcType=INTEGER},
			</if>
			<if test="isdelete != null" >
        #{isdelete,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.yulu.mangger.bean.Collects" >
    update collects
		<set >
			<if test="userid != null" >
        userid = #{userid,jdbcType=INTEGER},
			</if>
			<if test="newsid != null" >
        newsid = #{newsid,jdbcType=INTEGER},
			</if>
			<if test="isdelete != null" >
        isdelete = #{isdelete,jdbcType=INTEGER},
			</if>
		</set>
    where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.yulu.mangger.bean.Collects" >
    update collects
    set userid = #{userid,jdbcType=INTEGER},
      newsid = #{newsid,jdbcType=INTEGER},
      isdelete = #{isdelete,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
	</update>
  
	<select id="findCollectsList" parameterType="com.yulu.mangger.bean.Collects"
		resultType="com.yulu.mangger.bean.CollectsCustom">
		select news.title,news.sort,news.contect,collects.* from collects join news on collects.newsid=news.id where collects.isdelete=0
		<if test="newsid!=null">
			and newsid like '${newsid}'
		</if>
		<if test="userid!=null">
			and userid like '${userid}'
		</if>
		order by id desc
	</select>

	<select id="findCollects" parameterType="com.yulu.mangger.bean.Collects"
			resultType="com.yulu.mangger.bean.Collects">
		select * from collects where newsid=#{newsid} and
		userid=#{userid}
	</select>
</mapper>